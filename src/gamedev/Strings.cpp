#include <magique/gamedev/Strings.h>

#include <cxutil/cxstring.h>


namespace magique
{
    struct Point
    {
        float x = 0.0F;
        float y = 0.0F;
    };

    struct PointI
    {
        uint8_t x;
        uint8_t y;
    };


    constexpr Point KEY_POSITIONS[2][4][10] = {
        // QWERTY Layout
        {
            {
                {0.0, 0},
                {1.0, 0},
                {2.0, 0},
                {3.0, 0},
                {4.0, 0},
                {5.0, 0},
                {6.0, 0},
                {7.0, 0},
                {8.0, 0},
                {9.0, 0},
            }, // '1' to '0'
            {{0.5, 1},
             {1.5, 1},
             {2.5, 1},
             {3.5, 1},
             {4.5, 1},
             {5.5, 1},
             {6.5, 1},
             {7.5, 1},
             {8.5, 1},
             {9.5, 1}}, // 'q' to 'p'
            {{0.75, 2},
             {1.75, 2},
             {2.75, 2},
             {3.75, 2},
             {4.75, 2},
             {5.75, 2},
             {6.75, 2},
             {7.75, 2},
             {8.75, 2},
             {}}, // 'a' to 'l'
            {{1.25, 3},
             {2.25, 3},
             {3.25, 3},
             {4.25, 3},
             {5.25, 3},
             {6.25, 3},
             {7.25, 3},
             {},
             {},
             {}}, // 'z' to 'm' //////////
        },
        // QWERTZ layout
        {
            {
                {0.0, 0},
                {1.0, 0},
                {2.0, 0},
                {3.0, 0},
                {4.0, 0},
                {5.0, 0},
                {6.0, 0},
                {7.0, 0},
                {8.0, 0},
                {9.0, 0},
            }, // '1' to '0'
            {{0.5, 1},
             {1.5, 1},
             {2.5, 1},
             {3.5, 1},
             {4.5, 1},
             {5.5, 1},
             {6.5, 1},
             {7.5, 1},
             {8.5, 1},
             {9.5, 1}}, // 'q' to 'p'
            {{0.75, 2},
             {1.75, 2},
             {2.75, 2},
             {3.75, 2},
             {4.75, 2},
             {5.75, 2},
             {6.75, 2},
             {7.75, 2},
             {8.75, 2},
             {}}, // 'a' to 'l'
            {{1.25, 3},
             {2.25, 3},
             {3.25, 3},
             {4.25, 3},
             {5.25, 3},
             {6.25, 3},
             {7.25, 3},
             {},
             {},
             {}}, // 'z' to 'm' //////////
        },
    };

    constexpr PointI CHAR_LOOKUP[2][36] = {
        // QWERTY layout
        {
            {0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}, {0, 6}, {0, 7}, {0, 8}, {0, 9}, // '1' to '0'
            {1, 0}, {1, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 8}, {1, 9}, // 'q' to 'p'
            {2, 0}, {2, 1}, {2, 2}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {2, 7}, {2, 8},         // 'a' to 'l'
            {3, 0}, {3, 1}, {3, 2}, {3, 3}, {3, 4}, {3, 5}, {3, 6}                          // 'z' to 'm'
        },
        // QWERTZ layout
        {
            {0, 0}, {0, 1}, {0, 2}, {0, 3}, {0, 4}, {0, 5}, {0, 6}, {0, 7}, {0, 8}, {0, 9}, // '1' to '0'
            {1, 0}, {1, 1}, {1, 2}, {1, 3}, {1, 4}, {1, 5}, {1, 6}, {1, 7}, {1, 8}, {1, 9}, // 'q' to 'p'
            {2, 0}, {2, 1}, {2, 2}, {2, 3}, {2, 4}, {2, 5}, {2, 6}, {2, 7}, {2, 8},         // 'a' to 'l'
            {3, 0}, {3, 1}, {3, 2}, {3, 3}, {3, 4}, {3, 5}, {3, 6}                          // 'y' to 'm'
        }};

    PointI getCharPosition(const KeyboardLayout layout, char c)
    {
        if (layout == KeyboardLayout::QWERTY)
        {
            if (c >= '1' && c <= '9')
                return CHAR_LOOKUP[0][c - '1'];
            if (c == '0')
                return CHAR_LOOKUP[0][9];
            if (c >= 'a' && c <= 'z')
                return CHAR_LOOKUP[0][10 + (c - 'a')];
        }
        else if (layout == KeyboardLayout::QWERTZ)
        {
            if (c >= '1' && c <= '9')
                return CHAR_LOOKUP[1][c - '1'];
            if (c == '0')
                return CHAR_LOOKUP[1][9];
            if (c >= 'a' && c <= 'z')
                return CHAR_LOOKUP[1][10 + (c - 'a')];
        }
        return {255, 255}; // Invalid character
    }

} // namespace magique